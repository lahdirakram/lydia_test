"""this module contains a class that handles downoading, processing and saving data"""
import sqlite3
import datetime

class DataHandler:
    """this class handles downoading, processing and saving data"""

    def download_data(self, path: str):
        """
        this method takes a path to a sqlite database that contains a table named premium_payments 
            :params
            path : string path to sqlite database
            :returns
            data : pythonlist with a tuple representing eah row in the table
        """
        conn = sqlite3.connect(path)
        cursor = conn.cursor()
        iterable = cursor.execute("""
            SELECT member_id, date(date_start) as date_start, date(date_end) as date_end, type 
            FROM premium_payments
            ORDER BY member_id, date_start
        """)
        data = list(iterable)

        return data

    def process_data(self, data):
        """
        this method takes data and creates a table that contains a row per subscription 
        to premium with the member_id, the type of the souscription (1 to 3)
        the starting date and the ending date.
            :params
            data : list of tuples generated by download_data 
            :returns
            processed_data : list of tuples of  the new table like describes before
        """
        member_id = date_start = date_end = type = None
        processed_data = []
        for row in data:
            if member_id is None:
                member_id, date_start, date_end, type = row

            elif member_id != row[0]:
                processed_data.append((member_id, date_start, date_end, type))
                member_id, date_start, date_end, type = row

            elif type != row[3]:
                processed_data.append((member_id, date_start, date_end, type))
                _, date_start, date_end, type = row

            elif datetime.datetime.strptime(row[1],'%Y-%m-%d')\
                 - datetime.datetime.strptime(date_end,'%Y-%m-%d')\
                     < datetime.timedelta(3):
                date_end = row[2]
            else:
                processed_data.append((member_id, date_start, date_end, type))
                _, date_start, date_end, type = row

        if not member_id == date_start == date_end == type == None:
            processed_data.append((member_id, date_start, date_end, type))

        return processed_data

    def save_data(self, path, table, processed_data, table_creation_sql=None):
        """
        this method inserts data into a sqlite database table
            :params
            path : string path to database file
            table : string table name of database table
            processed_data : python list of tuples returned by process_data
            table_creation_sql : table creatin sql statement if the table does not exist in database 
        """
        conn = sqlite3.connect(path)
        cursor = conn.cursor()

        if table_creation_sql is not None:
            cursor.execute(table_creation_sql)

        str_values = str(processed_data[1:-1])
        cursor.execute(f"insert into {table} values {str_values}")
